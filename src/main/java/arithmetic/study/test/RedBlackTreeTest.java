package arithmetic.study.test;

/**
 * @author yangziyang
 * @since 2020-06-23
 */
public class RedBlackTreeTest {

    /***
     * 二叉树的弊端
     * 二叉树的时间复杂度跟二叉树的高度成正比，当二叉树的高度远大于log2n时（n为节点数），从而导致各个操作的效率都下降。
     * 极端情况下，二叉树可能退化为链表，时间复杂度又O(logn)退化为O(n)。
     */

    /***
     * 怎么解决二叉树的弊端
     * 平衡二叉树是二叉树的一种，不仅符合二叉树的所有特性，而且还能解决二叉树的弊端。
     * 众所周知，二叉树退化为链表的表现即为某一节点子树可能太长，从而远长于另一子树。
     * 平衡二叉树要求任何节点的左右子树高度差不能超过1。
     */

    /***
     * 红黑树的特点
     * 1.根节点是黑色的。
     * 2.每个叶子节点都是黑色的空节点（NULL），也就是说，叶子节点不存储数据。
     * 3.任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的。
     * 4.每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点。
     */

    /***
     * 2-3树
     * 说到红黑树，那么就不得不提2-3树了，2-3树是红黑树的前身，其思想跟红黑树一样，不过为了保持树的平衡，
     * 2-3树的操作就比红黑树繁琐的多了，要学习红黑树，我们可以从2-3树入手。
     */


}
