package arithmetic.study.jvm;

/***
 * java类的加载机制
 */
public class day01 {

    /***
     * 什么是类的加载机制
     * 类的加载是指将类的.class文件中的二进制数据读入到内存中，将其放在方法区内，一个.class文件在方法区中只保存一份。
     * 二进制数据包括静态变量、常量、运行时常量池、类的字段信息、类的方法信息。其中所有堆中的对象共用一套二进制数据。
     * 程序员要用.class文件对应的对象时，会在堆中创建一个该class的对象提供给程序员使用。
     * 即.class就加载在方法区中（内存中有且只有一份），对象放在堆中。
     *
     * 冷知识点
     * 类加载器并不需要等到某个类被"首次主动使用"时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它。
     * 如果在预先加载中遇到了.class文件缺失或存在错误，类加载器必须在程序首次使用该类时才报告错误。
     * 如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。
     */

    /***
     * 类的生命周期
     * 其中类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。
     * 在这五个阶段中，加载、验证、准备、初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后才开始，这是为了支持java语言的运行时绑定。
     * 另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。
     *
     * 加载
     * 加载是类加载过程中的第一个阶段，在加载阶段，虚拟机要完成以下三件事
     * 1.通过一个类的全限定名来获取其定义的二进制字节流
     * 2.将这个字节流所代表的静态储存结构转化为方法区的运行时数据结构
     * 3.在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些运行时数据的访问入口
     *
     * 验证
     * 
     */
}
