package arithmetic.study.jvm;

/***
 * JVM内存结构
 */
public class day02 {

    /***
     * JVM内存结构主要有三大块：堆内存、方法区和栈。
     * 堆内存是JVM中最大的一块，由年轻代和老年代组成，而年轻代又被分成三部分，Eden空间、From Survivor空间、To Survivor空间，默认情况下年轻代按照8:1:1比例来分配。
     * 方法区存储类信息、常量、静态变量等数据，是线程共享的区域，为与Java堆区分，方法区还有一个别名叫"非堆"。
     * 栈又分为Java虚拟机栈和本地方法栈，主要用于方法的执行，引用、成员变量等数据储存在本地方法栈中。
     */

    /***
     * Java堆（Heap）
     * 对于大多数应用来说，Java堆是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。
     * 此内存区域唯一的目的就是存放实例对象，几乎所有的对象实例都在这里分配内存。
     * Java堆是垃圾收集器管理的主要区域，因此很多时候被称为"GC堆"。如果从内存回收角度看，由于现在收集器基本都是采用的分代收集算法，所以Java堆中还可以细分为新生代和老年代，
     * 再细致一点的有Eden空间、From Survivor空间、To Survivor空间。
     * 根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘一样。
     * 在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。
     */

    /***
     * 方法区（Method Area）
     * 方法区跟堆一样，是各个线程共享的内存区域，它用于储存被虚拟机加载的类信息、常量、静态变量等。
     * 对于开发人员来说，很多人愿意把方法区称为"永久带"，本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区而已。
     * Java虚拟机规范对这个区域的限制非常宽松，除了和Java堆一样不需要连续内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。
     * 这个区域的内存回收目标主要是针对常量池的回收和对类的卸载，一般来说这个区域的回收成绩令人难以满意，特别是对类的卸载，条件相当苛刻，但是还是有必要的。
     */

    /***
     * 程序计数器
     * 程序计数器是一块比较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。
     * 字节码解释器工作时就是通过改变这个计数器的值来选取下一行需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个程序计数器。
     * Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个时刻，一个处理器（一个CPU内核）只会执行一条线程中的指令。
     * 因此，为了线程切换后能恢复到正确的执行位置，每条线程都有一个独立的程序计数器，各条线程之间的计数器互不影响，独立储存，我们称这类内存区域为"线程私有"内存。
     * 此内存区域是JVM规范中唯一一个没有规定任何内存溢出的区域。
     */

    /***
     * JVM栈
     * 与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。
     * 虚拟机栈描述的是Java方法执行的内存模型，每个方法被执行的时候都会同时创建一个栈帧用于储存局部变量表、操作栈、动态链接、方法出口等信息。
     * 每一个方法被调用直至执行完成的过程，就对应一个栈帧在虚拟机栈中从入栈到出栈的过程。
     * 局部变量表存放了编译器可知的基本数据类型、对象引用和returnAddress类型（指向一条字节码指令的地址）。
     * 在Java虚拟机规范中，对这个区域规定了两种异常状况：。
     * 1.如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常
     * 2.如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。
     */

    /***
     * 本地方法栈
     * 本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。
     */
}
