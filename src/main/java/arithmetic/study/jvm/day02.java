package arithmetic.study.jvm;

/***
 * JVM内存结构
 */
public class day02 {

    /***
     * JVM内存结构主要有三大块：堆内存、方法区和栈。
     * 堆内存是JVM中最大的一块，由年轻代和老年代组成，而年轻代又被分成三部分，Eden空间、From Survivor空间、To Survivor空间，默认情况下年轻代按照8:1:1比例来分配。
     * 方法区存储类信息、常量、静态变量等数据，是线程共享的区域，为与Java堆区分，方法区还有一个别名叫"非堆"。
     * 栈又分为Java虚拟机栈和本地方法栈，主要用于方法的执行，引用、成员变量等数据储存在本地方法栈中。
     */

    /***
     * Java堆（Heap）
     * 对于大多数应用来说，Java堆是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。
     * 此内存区域唯一的目的就是存放实例对象，几乎所有的对象实例都在这里分配内存。
     * Java堆是垃圾收集器管理的主要区域，因此很多时候被称为"GC堆"。如果从内存回收角度看，由于现在收集器基本都是采用的分代收集算法，所以Java堆中还可以细分为新生代和老年代，
     * 再细致一点的有Eden空间、From Survivor空间、To Survivor空间。
     * 根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘一样。
     * 在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。
     */

    /***
     * 方法区（Method Area）
     * 方法区跟堆一样，是各个线程共享的内存区域，它用于储存被虚拟机加载的类信息、常量、静态变量等。
     * 对于开发人员来说，很多人愿意把方法区称为"永久带"，本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区而已。
     *
     */
}
